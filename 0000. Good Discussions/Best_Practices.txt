////////////////////////////////////////
//  To_Avoid_Overflow
////////////////////////////////////////
1) In Problem 0278. First Bad Version
https://leetcode.com/problems/first-bad-version/discuss/71311/A-good-warning-to-me-to-use-start%2B(end-start)2-to-avoid-overflow
================================================================================================================================
Before this problem, I have always use
    mid = (start + end) / 2;
To get the middle value, but this can caused OVERFLOW !
when start and end are all about INT_MAX , then (start+end) of course will be overflow !

To avoid the problem we can use
    mid = start + (end - start)/2;
    
    
2) In Problem 2164. Sort Even and Odd Indices Independently
https://leetcode.com/problems/sort-even-and-odd-indices-independently/
================================================================================================================================
For the comparator in PriorityQueue,
the lambda approach is like:
        PriorityQueue<Integer> even = new PriorityQueue<>((a, b)->(a - b));
        PriorityQueue<Integer> odd = new PriorityQueue<>((a, b)->(b - a));

But the Comparator for the even can be left empty and for odd Comparator.reverseOrder() or Collections.reverseOrder() can be used.
Tips for interviews:
a - b is prone to overflow. Instead, Integer.compare(a, b) should be used.
Also don't change the content of the input data. But I didn't want to write an extra line.


////////////////////////////////////////
//  Ceiling
////////////////////////////////////////
In Problem 0875. Koko Eating Bananas
https://leetcode.com/problems/koko-eating-bananas/discuss/152324/C%2B%2BJavaPython-Binary-Search
================================================================================================================================
(p + m - 1) / m equal to ceil(p / m)


////////////////////////////////////////
//  To_Avoid_Accuracy_Lost_during_Devision
////////////////////////////////////////
In Problem 1120. Maximum Average Subtree
https://www.jiuzhang.com/solution/subtree-with-maximum-average/
https://yeqiuquan.blogspot.com/2017/03/lintcode-597-subtree-with-maximum.html
================================================================================================================================
// When comparing the average values, should transform the division operation to multiplication operation
// Transform the original divison like: rootResult.sum / rootResult.num > maxAverageData.sum / maxAverageData.num
// To be multiplication like below:
maxAverageData.num * rootResult.sum > maxAverageData.sum * rootResult.num


////////////////////////////////////////
//  When to Use Dynamic Programming
////////////////////////////////////////
Once there is one condition/requirement like below in the problem, then it probably needs to use DP solution:
1. To find Max/Min value -- 求最大最小值
2. To find whether there is a possible solution (whether it is feasible) -- 判断是否可行
3. To calculate the number of possible solutions -- 统计方案个数


////////////////////////////////////////
//  When NOT to Use Dynamic Programming
////////////////////////////////////////
In the cases like below, it probably should NOT use DP solution:
1. To find all the concrete solutions not the number of solutions -- 求出所有具体的方案而不是方案个数
   https://leetcode.com/problems/palindrome-partitioning/
2. The input is set not sequence -- 输入的数据是一个集合而不是序列
   https://leetcode.com/problems/longest-consecutive-sequence/
3. The time complexity based on Brute Force is alreay polynomial -- 暴力算法的复杂度已经是多项式级别
   a) DP is good at optimizing time complexity from exponential one to polynomial one: (2^n, n!) -> (n^2, n^3) -- 动态规划擅长于优化指数级别复杂度(2^n, n!)到多项式级别复杂度(n^2, n^3)
   b) DP is NOT good at optimizing time complexity from n^3 to n^2 -- 不擅长优化n^3到n^2


//////////////////////////////////////////////////////////////////////
//  How to Safely Remove Objects When Iterating through a Collection
//////////////////////////////////////////////////////////////////////
In Problem 1288. Remove Covered Intervals:
Iterator.remove() is safe, you can use it like this:
    List<String> list = new ArrayList<>();
    // This is a clever way to create the iterator and call iterator.hasNext() like
    // you would do in a while-loop. It would be the same as doing:
    //     Iterator<String> iterator = list.iterator();
    //     while (iterator.hasNext()) {
    for (Iterator<String> iterator = list.iterator(); iterator.hasNext();) {
        String string = iterator.next();
        if (string.isEmpty()) {
            // Remove the current element from the iterator and the list.
            iterator.remove();
        }
    }


////////////////////////////////////////
//  How to Reduce DP Space from 2D to 1D
////////////////////////////////////////
In Problem 0877. Stone Game:
Another view by trying to reducing space:
if you see the 2d dp version dp[i][j] = max(piles[i] - dp[i + 1][j], piles[j] - dp[i][j - 1]), the second dimension j can be reduced.
Why? If we only look at the second dimension: dp[...][j] only uses dp[...][j] and dp[...][j-1], which means we can reduce it by using previous dp[...] results.
So dp[i][j] can be written as dp[i], dp[i-1][j] can be dp[i-1]. It's a common trick to compress dp space.


================================================================================================================================


////////////////////////////////////////
//  
////////////////////////////////////////
In Problem 

================================================================================================================================
